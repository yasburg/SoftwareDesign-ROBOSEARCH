// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement.ROBOSEARCH;

import javax.vecmath.Vector3d;
/************************************************************/
/**
 * 
 */
public class Map {
	/**
	 * 
	 */
	public CoordinateStatus[][] coordinateList;
	/**
	 * 
	 */
	private double coveredPercentage;
	/**
	 * 
	 */
	private boolean missionStatus;
	
	/**
	 * 
	 * @return 
	 */
	//This function will be used by central station to track if the mission
	//is over. Also getPercentage() could be used to check it in central station
	//but we decided to use boolean to make it clear in central station implementation.
	public boolean checkMissionStatus() {
		return missionStatus;
	}
	
	public Map()
	{
		this.coordinateList = new CoordinateStatus[26][26];
		for (int i = 0; i < 26; i++)
        {
            for (int j = 0; j < 26; j++)
            {
                coordinateList[i][j] = CoordinateStatus.EMPTY;
            }
        }
		this.coveredPercentage = 0.0;
		this.missionStatus = false;
	}

	/**
	 * 
	 * @return 
	 */
	//missionStatus will be updated to true when the 70% of the map is covered
	public void updatePercentange() {
		this.coveredPercentage =  this.coveredPercentage + (1.0/(25*25));
		if(Double.compare(this.getPercentage() , 0.70) > 0){
			this.missionStatus = true;
		}
	}
	
	/**
	 * 
	 * @return 
	 */
	public double getPercentage() {
		return this.coveredPercentage;
	}

	/**
	 * 
	 * @return 
	 * @param coordinate 
	 */
	//The algorithm that we desinged have some edge cases that have been thought of:
	//1.Robot will only change the status of the coordinate if it was EMPTY in previous state
	//because changing VISITED and OBSTACLE can lead to repetative actions and for the implementation
	//it would confuse coders that are going to chagne the code later on.
	//2.When two robots sees eachother and detects eachother as obstacles. They will change the
	//status of that wrong OBSTACLE status they just left to VISITED. So this case is handled with last (else if)
	public void updateCoordinateList(Coordinate coordinate) {
		Vector3d test = coordinate.getCoordinate();
		//WHEN THE COORDINATES STATUS IS EMPTY
		if(this.coordinateList[((int) (test.getX())+12)][((int) (test.getZ())+12)] == CoordinateStatus.EMPTY && coordinate.getStatus() == CoordinateStatus.VISITED){
			//when the coordinate is EMPTY and it tries to update status to VISITED it is updated
			this.coordinateList[((int) (test.getX())+12)][((int) (test.getZ())+12)] = coordinate.getStatus();
			this.updatePercentange();
		}
		else if(this.coordinateList[((int) (test.getX())+12)][((int) (test.getZ())+12)] == CoordinateStatus.EMPTY && coordinate.getStatus() == CoordinateStatus.OBSTACLE){
			//when the coordinate is EMPTY and it tries to update status to OBSTACLE it is updated
			this.coordinateList[((int) (test.getX())+12)][((int) (test.getZ())+12)] = coordinate.getStatus();
			this.updatePercentange();
		}
		//This is for the edge case thats been told in the previous comments
		else if(this.coordinateList[((int) (test.getX())+12)][((int) (test.getZ())+12)] == CoordinateStatus.OBSTACLE && coordinate.getStatus() == CoordinateStatus.VISITED){
			//when the coordinate is OBSTACLE and it tries to update status to VISITED it is updated
			this.coordinateList[((int) (test.getX())+12)][((int) (test.getZ())+12)] = coordinate.getStatus();
			this.updatePercentange();
		}
		else{
			//when the coordinate is EMPTY and it tries to update status to EMPTY nothing will happen
			//nothing happens because when the status is OBSTACLE OR VISITED no need to update it. Since we olny update unknown coordinates and the ones
			//that are VISITED after robots leave that coordinate
		}
	}
};
