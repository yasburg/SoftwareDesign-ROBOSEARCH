// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package RootElement.ROBOSEARCH;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Set;

import javax.imageio.ImageIO;

/************************************************************/
/**
 * 
 */
public class CentralStation implements Subject {
	/**
	 * 
	 */
	//singleton pattern is used
	private static CentralStation Instance = new CentralStation();
	/**
	 * 
	 */
	private UserInterface UI;
	/**
	 * 
	 */
	public Map map;
	/**
	 * 
	 */
	public String boxColor;
	/**
	 * 
	 */
	private Observer[] observers;
	/**
	 * 
	 */
	public ArrayList<Image> obstacleList;
	
	//For this project observer count was fixed but if change required:
	//1.The number of robots created in environment.java must be changed.
	//2.new Observer[#]; # must be changed accordingly
	private CentralStation() {
		this.obstacleList = new ArrayList<Image>();
		this.map = new Map();
		this.observers = new Observer[4];
	}

	/**
	 * 
	 * @return 
	 */
	//returns the singleton instance
	public static CentralStation getInstance() {
		return Instance;
	}

	/**
	 * 
	 * @param command 
	 * @return 
	 */
	//Through this function user shall be able to command tasks to robots
	//With the id taken from the user interface. Also this function will be 
	//called after robot reports to central station so that central station
	//can decide new location to send and it can command new destination to do
	//as determined with the algorithm. 
	public void sendCommand(Command command, int id) {
		this.observers[id].update(command);
	}
	
	public void saveImages() {
		for (Image image : obstacleList)
		{
			String imageName = Integer.toString((int)image.coordinate.getCoordinateX()) + "," + Integer.toString((int)image.coordinate.getCoordinateY());
			try {
				File outputFile = new File("Images/" + imageName + ".png");
				ImageIO.write(image.image, "png", outputFile);
			}catch(IOException e) {
				System.err.println("Problem saving " + imageName + ": " + e.getMessage());
			}
		}
	}

	/**
	 * 
	 * @param east 
	 * @param south 
	 * @param west 
	 * @param north 
	 */
	//This function will be called in robot.java to update the map with the
	//information gathered from the sensors. It gets 4 coordinate because 
	//robots have 4 sensors that are placed perpendicular to each other
	//If the sensor count increases number of functions and number of parameters that this
	//function get must be changed!!For now its sending 4 coordinates 
	//with their status stored inside to map to update
	public void reportToMap(Coordinate north, Coordinate west, Coordinate south, Coordinate east) {
		this.map.updateCoordinateList(north);
		this.map.updateCoordinateList(west);
		this.map.updateCoordinateList(south);
		this.map.updateCoordinateList(east);

		if(this.map.checkMissionStatus()){
			this.stopMission();
		}
	}
	/**
	 * 
	 * @param visitedCoor 
	 */
	//This function will be called in robot.java to update the map with
	//the last visited coordinate by this(robot that called this function) robot.
	public void reportTheVisited(Coordinate visitedCoor) {
		this.map.updateCoordinateList(visitedCoor);
		
		//Checking if the mission is over
		if (this.map.checkMissionStatus()){
			this.stopMission();
		}
	}
	
	public Set<String> getObstacleCoordinates() {
		Set<String> set = new LinkedHashSet<String>();
		for (Image temp : this.obstacleList)
		{
			String imageCoordinate = "(" + Integer.toString((int) temp.coordinate.getCoordinateX()) + "," + Integer.toString((int) temp.coordinate.getCoordinateY()) + ")";
			set.add(imageCoordinate);
		}

		return set;
	}
	
	/**
	 * 
	 * @param observer 
	 * @return 
	 */
	//This is the implementation of the function thats is located in Subject.java
	//Function attaches robots to list/array so that later central station
	//can access robots or send command by using this list/array
	public void attach(Observer observer, int id) {
		this.observers[id] = observer;
	}
	/**
	 * 
	 * @param observer 
	 * @return 
	 */
	//This is the implementation of the function thats is located in Subject.java
	//Function detaches robots to list/array to unsubscribe it from the system
	//This can be used if there is any malfunctioning or game ends
	//in order to clear list all robots have to be detached from the subject
	public void detach(Observer observer, int id) {
		this.observers[id] = null;
	}
	
	//calls the functions and sends commands required to stop the mission and disable the UI.
	public void stopMission()
	{
		Command temp = new Command(AvailableCommands.STOP_MISSION);
		for (int i = 0; i < 4; i++)
		{
			sendCommand(temp, i);
		}
		this.UI.disableButtons();
		this.UI.printMessage("Mission has ended.");
        this.UI.printInfo();
        this.saveImages();
	}
	
	public void setColor(String color) {
		this.boxColor = color;
	}
	
	public void setUI(UserInterface userInterface) {
		this.UI = userInterface;
	}
};
